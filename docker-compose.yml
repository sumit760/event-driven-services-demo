version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - demo-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - demo-network

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - demo-network

  # Observability Services
  jaeger:
    image: jaegertracing/all-in-one:1.50
    hostname: jaeger
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - demo-network

  prometheus:
    image: prom/prometheus:v2.47.0
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - demo-network

  grafana:
    image: grafana/grafana:10.1.0
    hostname: grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - demo-network

  # Dapr Placement Service
  dapr-placement:
    image: "daprio/dapr:1.12.0"
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - demo-network

  # Application Services
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    hostname: order-service
    container_name: order-service
    ports:
      - "50051:50051"
    depends_on:
      - kafka
      - redis
      - dapr-placement
    environment:
      - DAPR_HTTP_PORT=3500
      - DAPR_GRPC_PORT=50001
    networks:
      - demo-network

  order-service-dapr:
    image: "daprio/daprd:1.12.0"
    command: [
      "./daprd",
      "-app-id", "order-service",
      "-app-port", "50051",
      "-dapr-http-port", "3500",
      "-dapr-grpc-port", "50001",
      "-placement-host-address", "dapr-placement:50006",
      "-components-path", "/components",
      "-config", "/config/config.yaml"
    ]
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/config"
    depends_on:
      - order-service
      - dapr-placement
    network_mode: "service:order-service"

  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    hostname: inventory-service
    container_name: inventory-service
    ports:
      - "50052:50052"
    depends_on:
      - kafka
      - redis
      - dapr-placement
    environment:
      - DAPR_HTTP_PORT=3500
      - DAPR_GRPC_PORT=50001
    networks:
      - demo-network

  inventory-service-dapr:
    image: "daprio/daprd:1.12.0"
    command: [
      "./daprd",
      "-app-id", "inventory-service",
      "-app-port", "50052",
      "-dapr-http-port", "3500",
      "-dapr-grpc-port", "50001",
      "-placement-host-address", "dapr-placement:50006",
      "-components-path", "/components",
      "-config", "/config/config.yaml"
    ]
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/config"
    depends_on:
      - inventory-service
      - dapr-placement
    network_mode: "service:inventory-service"

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    hostname: notification-service
    container_name: notification-service
    ports:
      - "3000:3000"
    depends_on:
      - kafka
      - redis
      - dapr-placement
    environment:
      - DAPR_HTTP_PORT=3500
      - DAPR_GRPC_PORT=50001
      - APP_PORT=3000
    networks:
      - demo-network

  notification-service-dapr:
    image: "daprio/daprd:1.12.0"
    command: [
      "./daprd",
      "-app-id", "notification-service",
      "-app-port", "3000",
      "-dapr-http-port", "3500",
      "-dapr-grpc-port", "50001",
      "-placement-host-address", "dapr-placement:50006",
      "-components-path", "/components",
      "-config", "/config/config.yaml"
    ]
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/config"
    depends_on:
      - notification-service
      - dapr-placement
    network_mode: "service:notification-service"

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  demo-network:
    driver: bridge

